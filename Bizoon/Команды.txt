1. Создание пользователей:

>>> User.objects.create_user('znamenka')
    <User: znamenka>

>>> User.objects.create_user('rov_2016')
    <User: rov_2016>

2. Создание авторов:

>>> c=User.objects.get(username='znamenka')
>>> Author.objects.create(full_name='Нина Родина', e_mail='brontozyabra@mail.ru', id_users_id=c.id)
    <Author: Author object (1)>
>>> c.id
    1

>>> Author.objects.create(full_name='Ровенький Кирилл', e_mail='achacha16@mail.ru', id_users_id=2)
    <Author: Author object (2)>

3. Создание категорий:

>>> Category.objects.create(name='Наука')
    <Category: Наука>

>>> Category.objects.create(name='Ветеринарная медицина')
    <Category: Ветеринарная медицина>

>>> Category.objects.create(name='Технологии')
    <Category: Технологии>

>>> Category.objects.create(name='Мероприятия')
    <Category: Мероприятия>

4. Создание постов:

>>> Post.objects.create(head_article='Когда же разрешат использовать препараты для людей в ветеринарной медицине?', text_post='Законопроект, разрешающий использовать препараты для людей в ветеринарной медицине, будет рассмотрен Госдумой в сентябре 2022 года.', type_post='article', id_author_id=1)
    <Post: Post object (1)>

>>> Post.objects.create(head_article='Пингвину из зоопарка Сан-Диего надели ортопедическую обувь', text_post='Одному из африканских пингвинов, содержащихся в зоопарке Сан-Диего в США, надели специально изготовленную ортопедическую обувь для исправления дегенеративного заболевания стопы.', type_post='article', id_author_id=2)
    <Post: Post object (2)>

>>> Post.objects.create(head_article='В Сингапуре разработали метод выращивания мяса из грибов', text_post='Ученые из Наньянского технологического университета в Сингапуре (NTU) разработали метод выращивания пищевого продукта на основе грибов, который, по их утверждению, может стать более здоровой, вкусной и питательной альтернативой растительным заменителям мяса.', type_post='news', id_author_id=2)
    <Post: Post object (3)>

5. Присваивание категорий постам:

>>> cat1=Category.objects.get(id=2)
>>> cat2=Category.objects.get(id=1)
>>> cat3=Category.objects.get(id=4)
>>> cat4=Category.objects.get(id=3)

>>> post1=Post.objects.get(id=1)
>>> post2=Post.objects.get(id=2)
>>> post3=Post.objects.get(id=3)

>>> post1.category.add(cat1)
>>> post1.category.add(cat3)
>>> post2.category.add(cat4)
>>> post2.category.add(cat3)
>>> post3.category.add(cat2)
>>> post3.category.add(cat4)

6. Создание комментариев:

>>> user1=User.objects.get(id=1)
>>> user1.username
    'znamenka'
>>> Comments.objects.create(id_post=post1, text='Дождались!', id_users=user1)
    <Comments: Comments object (1)>

>>> user2=User.objects.get(id=2)
>>> user2.username
    'rov_2016'
>>> Comments.objects.create(id_post=post2, text='Не болейте!', id_users=user2)
    <Comments: Comments object (2)>
>>> Comments.objects.create(id_post=post2, text='))))', id_users=user1)
    <Comments: Comments object (3)>

>>> Comments.objects.create(id_post=post3, text='Котлеты из плесени)))', id_users=user2)
    <Comments: Comments object (4)>

>>> c=Comments.objects.get(id=1)
>>> c.like()
>>> c.like()
>>> c.like()
>>> c.like()
>>> c.like()
>>> c.dislike()
>>> c.dislike()
>>> c.like()
>>> c.like()
>>> c.like()
>>> c.dislike()
>>> c.like()
>>> c.sum_rank
    6

7. Корректировка рейтингов объектов:

>>> post1=Post.objects.get(id=1)
>>> post1.like()
>>> post1.like()
>>> post1.like()
>>> post1.like()
>>> post1.like()
>>> post1.like()
>>> post1.like()
>>> post1.dislike()
>>> post1.dislike()
>>> post1.sum_rank
    5
>>> post2=Post.objects.get(id=2)
>>> post2.dislike()
>>> post2.like()
>>> post2.like()
>>> post2.like()
>>> post2.like()
>>> post2.like()
>>> post2.sum_rank
    4
>>> post3=Post.objects.get(id=3)
>>> post3.sum_rank
    0
>>> post3.like()
>>> post3.like()
>>> post3.dislike()
>>> post3.sum_rank
    1

8. Обновление рейтингов пользователей:

>>> Author.objects.get(id=1).update_rating()
>>> Author.objects.get(id=2).update_rating()

9. Вывод username и рейтинг лучшего пользователя:

>>> c=Author.objects.order_by('-rank').first()
>>> c.id_users.username
    'znamenka'
>>> c.rank
    31

10. Вывод даты добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье:

>>> c=Post.objects.order_by('-sum_rank').first()
>>> c.preview()
    'Законопроект, разрешающий использовать препараты для людей в ветеринарной медицине, будет рассмотрен Госдумой в сентябре 202'
>>> c.head_article
    'Когда же разрешат использовать препараты для людей в ветеринарной медицине?'
>>> c.date.strftime('%Y-%m-%d-%H.%M.%S')
    '2022-09-17-11.18.46'
>>> c.id_author.id_users.username
    'znamenka'

11. Вывод всех комментариев к этой статье (дата, пользователь, рейтинг, текст):
>>> Comments.objects.filter(id_post=c.id).values('text', 'id_users__username', 'date', 'sum_rank')
    <QuerySet [{'text': 'Дождались!', 'id_users__username': 'znamenka', 'date': datetime.datetime(2022, 9, 17, 12, 3, 1, 939897, tzinfo=datetime.timezone.utc), 'sum_rank': 6}]>








